<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>mango_blog</artifactId>
        <groupId>com.mangoblog</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    
    <artifactId>mango_web</artifactId>

    <dependencies>
        <dependency>
            <groupId>com.mangoblog</groupId>
            <artifactId>service_security</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
        <!--服务注册-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <dependency>
            <groupId>eu.bitwalker</groupId>
            <artifactId>UserAgentUtils</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>2.1.0</version>

                <!-- 如果不配置 generate-daemons，则打包命令为 mvn clean package appassembler:assemble -->
                <!-- 如果配置了 generate-daemons，打包命令可以是 mvn clean package 也可以是 mvn clean package appassembler:assemble -->
                <executions>
                    <execution>
                        <id>mango-web-appassembler</id>
                        <phase>package</phase>
                        <goals>
                            <goal>assemble</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!-- flat与lib共同决定将项目用的的所有jar包复制到lib目录下 -->
                    <repositoryLayout>flat</repositoryLayout>
                    <!--从哪里copy配置文件-->
                    <configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
                    <includeConfigurationDirectoryInClasspath>true</includeConfigurationDirectoryInClasspath>
                    <!--是否copy配置文件-->
                    <copyConfigurationDirectory>true</copyConfigurationDirectory>
                    <!--生成的项目的目录位置-->
                    <assembleDirectory>${project.build.directory}/deploy</assembleDirectory>
                    <!--配置文件存放在conf目录路径-->
                    <configurationDirectory>config</configurationDirectory>
                    <!-- 打包的jar，以及maven依赖的jar放到这个目录里面 -->
                    <repositoryName>lib</repositoryName>
                    <!-- 可执行脚本的目录 -->
                    <binFolder>bin</binFolder>

                    <!-- 生成linux, windows两种平台的执行脚本 -->
                    <platforms>
                        <!--                        <platform>windows</platform>-->
                        <platform>unix</platform>
                    </platforms>

                    <!-- 针对不同平台生成不同类型的启动脚本 -->
                    <binFileExtensions>
                        <unix>.sh</unix>
                        <!--                        <windows>.bat</windows>-->
                    </binFileExtensions>

                    <!--编码，日志-->
                    <encoding>UTF-8</encoding>
                    <logsDirectory>logs</logsDirectory>

                    <!--java启动参数-->
                    <extraJvmArguments>-Xms1024m -Xmx1024m -Xmn512m</extraJvmArguments>
                    <programs>
                        <program>
                            <!--指定主类，脚本名。会生成shell/bat两种类型,也可用platforms指定运行平台-->
                            <mainClass>com.myblog.service.web.BlogWebServiceApplication</mainClass>
                            <!-- 生成的脚本文件的名称，比如start.sh,你也可以根据你的需要命名成其他名字 -->
                            <name>startup</name>
                        </program>
                    </programs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 -->
                        <manifest>
                            <!-- 是否要把第三方jar加入到类构建路径 -->
                            <addClasspath>true</addClasspath>
                            <!-- 外部依赖jar包的最终位置 -->
                            <!-- 因为我们将第三方jar和本项目jar放在同一个目录下，这里就使用./ -->
                            <classpathPrefix>./</classpathPrefix>
                            <!-- 项目启动类 -->
                            <mainClass>com.myblog.service.admin.BlogAdminServiceApplication</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <descriptor>src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <id>mango-web-assembly</id>
                        <!--绑定到maven操作类型上-->
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>

                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>